<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.comparathor.repository.ProductRepository">

    <!-- 🔹 Mapeo de resultados para Product -->
    <resultMap id="ProductResultMap" type="com.comparathor.model.Product">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="category" column="category"/>
        <result property="price" column="price"/>
        <result property="stock" column="stock"/>
        <result property="description" column="description"/>
        <result property="brand" column="brand"/>
        <result property="model" column="model"/>
        <result property="imageUrl" column="image_url"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- 🔹 Condiciones de Filtro Reutilizables -->
    <sql id="ProductFilterConditions">
        <if test="name != null and name != ''">
            AND LOWER(p.name) LIKE LOWER(CONCAT('%', #{name}, '%'))
        </if>

        <if test="category != null and category != ''">
            AND LOWER(p.category) = LOWER(#{category})
        </if>

        <if test="brand != null and brand != ''">
            AND LOWER(p.brand) = LOWER(#{brand})
        </if>

        <if test="minPrice != null">
            AND p.price >= #{minPrice}
        </if>

        <if test="maxPrice != null">
            AND p.price &lt;= #{maxPrice}
        </if>

        <if test="stock != null">
            AND p.stock >= #{stock}
        </if>

        <if test="searchTerm != null and searchTerm != ''">
            AND (
            LOWER(p.name) LIKE LOWER(CONCAT('%', #{searchTerm}, '%'))
            OR LOWER(p.description) LIKE LOWER(CONCAT('%', #{searchTerm}, '%'))
            OR LOWER(p.brand) LIKE LOWER(CONCAT('%', #{searchTerm}, '%'))
            OR LOWER(p.model) LIKE LOWER(CONCAT('%', #{searchTerm}, '%'))
            )
        </if>

        <if test="startDate != null and startDate != ''">
            AND p.created_at &gt;= #{startDate}
        </if>

        <if test="endDate != null and endDate != ''">
            AND p.created_at &lt;= #{endDate}
        </if>
    </sql>

    <!-- 🔢 Contar productos filtrados -->
    <select id="countFilteredProducts" resultType="int">
        SELECT COUNT(*)
        FROM products p
        WHERE 1=1
        <include refid="ProductFilterConditions"/>
    </select>

    <!-- 🔍 Buscar productos con filtros, ordenamiento y paginación -->
    <select id="findFilteredProducts" resultMap="ProductResultMap">
        SELECT p.id, p.name, p.category, p.price, p.stock, p.description,
        p.brand, p.model, p.image_url, p.created_at, p.updated_at
        FROM products p
        WHERE 1=1
        <include refid="ProductFilterConditions"/>

        <if test="sortField != null and sortOrder != null">
            ORDER BY
            <choose>
                <when test="sortField == 'name'"> p.name </when>
                <when test="sortField == 'price'"> p.price </when>
                <when test="sortField == 'stock'"> p.stock </when>
                <when test="sortField == 'createdAt'"> p.created_at </when>
                <when test="sortField == 'updatedAt'"> p.updated_at </when>
                <otherwise> p.created_at </otherwise>
            </choose>
            <choose>
                <when test="sortOrder == 'asc'"> ASC </when>
                <otherwise> DESC </otherwise>
            </choose>
        </if>
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 🔍 Buscar un producto por ID -->
    <select id="findById" resultMap="ProductResultMap">
        SELECT p.id, p.name, p.category, p.price, p.stock, p.description,
               p.brand, p.model, p.image_url, p.created_at, p.updated_at
        FROM products p
        WHERE p.id = #{id}
    </select>

    <!-- 🔍 Verificar si un producto con un ID específico existe -->
    <select id="existsById" resultType="int">
        SELECT COUNT(*) FROM products WHERE id = #{id}
    </select>

    <!-- 🔍 Verificar si un producto con un nombre específico existe -->
    <select id="existsByName" resultType="int">
        SELECT COUNT(*) FROM products WHERE LOWER(name) = LOWER(#{name})
    </select>

    <!-- ➕ Insertar un nuevo producto -->
    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO products (name, category, price, stock, description, brand, model, image_url, created_at, updated_at)
        VALUES (#{name}, #{category}, #{price}, #{stock}, #{description}, #{brand}, #{model}, #{imageUrl}, #{createdAt}, #{updatedAt})
    </insert>

    <!-- ✏️ Actualizar un producto existente -->
    <update id="updateProduct">
        UPDATE products
        SET name = #{name},
            category = #{category},
            price = #{price},
            stock = #{stock},
            description = #{description},
            brand = #{brand},
            model = #{model},
            image_url = #{imageUrl},
            updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>

    <!-- 🗑️ Eliminar un producto por ID -->
    <delete id="delete">
        DELETE FROM products WHERE id = #{id}
    </delete>

</mapper>
