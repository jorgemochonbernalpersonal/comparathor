<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.comparathor.repository.ProductRepository">

    <resultMap id="ProductResultMap" type="com.comparathor.model.Product">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="categoryId" column="category_id"/>
        <result property="categoryName" column="category_name"/>
        <result property="brandId" column="brand_id"/>
        <result property="brandName" column="brand_name"/>
        <result property="price" column="price"/>
        <result property="stock" column="stock"/>
        <result property="model" column="model"/>
        <result property="imageUrl" column="image_url"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <sql id="ProductFilterConditions">
        <if test="search != null and search != ''">
            AND (
            LOWER(p.name) LIKE LOWER(CONCAT('%', #{search}, '%'))
            OR LOWER(p.description) LIKE LOWER(CONCAT('%', #{search}, '%'))
            OR LOWER(p.model) LIKE LOWER(CONCAT('%', #{search}, '%'))
            )
        </if>
        <if test="categoryId != null">
            AND p.category_id = #{categoryId}
        </if>
        <if test="brandId != null">
            AND p.brand_id = #{brandId}
        </if>
        <if test="minPrice != null">
            AND p.price >= #{minPrice}
        </if>
        <if test="maxPrice != null">
            AND p.price &lt;= #{maxPrice}
        </if>
        <if test="minStock != null and minStock != ''">
            AND p.stock >= #{minStock}::INTEGER
        </if>
        <if test="maxStock != null and maxStock != ''">
            AND p.stock &lt;= #{maxStock}::INTEGER
        </if>
        <if test="startDate != null">
            AND p.created_at >= #{startDate}
        </if>
        <if test="endDate != null">
            AND p.created_at &lt;= #{endDate}
        </if>
    </sql>

    <select id="countFilteredProducts" resultType="int">
        SELECT COUNT(*)
        FROM products p
        WHERE 1=1
        <include refid="ProductFilterConditions"/>
    </select>

    <select id="findFilteredProducts" resultMap="ProductResultMap">
        SELECT
        p.id, p.name, p.category_id, c.name AS category_name,
        p.brand_id, b.name AS brand_name, p.price, p.stock,
        p.model, p.image_url, p.created_at, p.updated_at, p.description,p.created_by
        FROM products p
        LEFT JOIN categories c ON p.category_id = c.id
        LEFT JOIN brands b ON p.brand_id = b.id
        WHERE 1=1
        <include refid="ProductFilterConditions"/>
        <if test="sortField != null and sortField != '' and sortOrder != null and sortOrder != ''">
            ORDER BY
            <choose>
                <when test="sortField == 'id'">p.id</when>
                <when test="sortField == 'name'">p.name</when>
                <when test="sortField == 'price'">p.price</when>
                <when test="sortField == 'stock'">p.stock</when>
                <when test="sortField == 'createdAt'">p.created_at</when>
                <otherwise>p.id</otherwise>
            </choose>
            <choose>
                <when test="sortOrder == 'asc'">ASC</when>
                <otherwise>DESC</otherwise>
            </choose>
        </if>
        <if test="size != null and size > 0">
            LIMIT #{size} OFFSET #{offset}
        </if>
    </select>

    <select id="findAll" resultMap="ProductResultMap">
        SELECT p.id,
               p.name,
               p.category_id,
               c.name AS category_name,
               p.brand_id,
               b.name AS brand_name,
               p.price,
               p.stock,
               p.model,
               p.image_url,
               p.created_at,
               p.updated_at
        FROM products p
                 LEFT JOIN categories c ON p.category_id = c.id
                 LEFT JOIN brands b ON p.brand_id = b.id
    </select>
    <select id="existsByName" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM products
        WHERE LOWER(TRIM(name)) = LOWER(TRIM(#{name}))
    </select>
    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO products (name, category_id, brand_id, price, stock, description, model, image_url, created_at,
                              updated_at, created_by)
        VALUES (#{name}, #{categoryId}, #{brandId}, #{price}, #{stock}, #{description}, #{model}, #{imageUrl}, NOW(),
                NOW(), #{createdBy})
    </insert>

    <delete id="deleteById">
        DELETE FROM products WHERE id = #{id};
    </delete>
    <select id="findById" resultMap="ProductResultMap">
        SELECT * FROM products WHERE id = #{id}
    </select>
    <insert id="saveAll">
        INSERT INTO products (name, category_id, brand_id, price, stock, description, model, image_url, created_at, updated_at)
        VALUES
        <foreach collection="products" item="product" separator=",">
            (#{product.name}, #{product.categoryId}, #{product.brandId}, #{product.price}, #{product.stock},
            #{product.description}, #{product.model}, #{product.imageUrl}, NOW(), NOW())
        </foreach>
    </insert>
    <update id="updateAll">
        <foreach collection="products" item="product" separator=";">
            UPDATE products
            SET image_url = #{product.imageUrl}, updated_at = NOW()
            WHERE id = #{product.id}
        </foreach>
    </update>
    <select id="findByImageUrl" resultType="Product">
        SELECT id, name, category_id, brand_id, price, stock, description, model, image_url, created_at, updated_at
        FROM products
        WHERE LOWER(TRIM(image_url)) LIKE LOWER(TRIM(CONCAT('%', #{imageUrl}, '%')))
            LIMIT 1
    </select>
</mapper>
