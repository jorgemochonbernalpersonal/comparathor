<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.comparathor.repository.RatingRepository">

    <!-- 🟢 Mapeo de resultados para Rating -->
    <resultMap id="RatingResultMap" type="com.comparathor.model.Rating">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="productId" column="product_id"/>
        <result property="rating" column="rating"/>
        <result property="comment" column="comment"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- 🔍 Buscar calificaciones con filtros y paginación -->
    <select id="findFilteredRatings" resultMap="RatingResultMap">
        SELECT id, user_id, product_id, rating, comment, created_at, updated_at
        FROM ratings
        WHERE 1=1

        <include refid="RatingFilterConditions"/>

        <if test="sortField != null and sortOrder != null">
            ORDER BY
            <choose>
                <when test="sortField == 'rating'"> rating </when>
                <when test="sortField == 'createdAt'"> created_at </when>
                <otherwise> created_at </otherwise>
            </choose>
            <choose>
                <when test="sortOrder == 'asc'"> ASC </when>
                <otherwise> DESC </otherwise>
            </choose>
        </if>
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 🔢 Contar calificaciones filtradas -->
    <select id="countFilteredRatings" resultType="int">
        SELECT COUNT(*)
        FROM ratings
        WHERE 1=1

        <include refid="RatingFilterConditions"/>
    </select>

    <!-- 🟢 Crear calificación -->
    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO ratings (user_id, product_id, rating, comment, created_at, updated_at)
        VALUES (#{userId}, #{productId}, #{rating}, #{comment}, #{createdAt}, #{updatedAt})
    </insert>

    <!-- 🔄 Actualizar calificación -->
    <update id="updateRating">
        UPDATE ratings
        SET rating = #{rating},
            comment = #{comment},
            updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>

    <!-- 🔴 Eliminar calificación -->
    <delete id="deleteRating">
        DELETE FROM ratings WHERE id = #{id}
    </delete>

    <!-- 📌 Condiciones reutilizables para filtros -->
    <sql id="RatingFilterConditions">
        <if test="productId != null">
            AND product_id = #{productId}
        </if>
        <if test="userId != null">
            AND user_id = #{userId}
        </if>
        <if test="startDate != null">
            AND created_at >= #{startDate}
        </if>
        <if test="endDate != null">
            AND created_at &lt;= #{endDate}
        </if>
    </sql>

    <!-- Buscar calificación específica de un usuario para un producto -->
    <select id="findUserRatingForProduct" resultMap="RatingResultMap">
        SELECT id, user_id, product_id, rating, comment, created_at, updated_at
        FROM ratings
        WHERE product_id = #{productId} AND user_id = #{userId}
    </select>

    <!-- Buscar calificación por ID -->
    <select id="findById" parameterType="long" resultMap="RatingResultMap">
        SELECT id, user_id, product_id, rating, comment, created_at, updated_at
        FROM ratings
        WHERE id = #{id}
    </select>


</mapper>
